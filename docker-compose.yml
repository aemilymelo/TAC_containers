# A versão do arquivo não é mais necessária nas versões mais recentes do Docker Compose.
services:
  # Serviço 1: API Gateway com NGINX
  # Este serviço atua como ponto de entrada, roteando o tráfego
  # para os serviços de back-end e servindo o front-end estático.
  nginx:
    image: nginx:stable-alpine
    container_name: nginx_gateway
    ports:
      - "80:80"
    volumes:
      # Monta o arquivo de configuração do Nginx.
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      # Monta os arquivos estáticos do front-end (build do Next.js/React).
      # IMPORTANTE: Você precisa gerar o build do seu front-end (ex: 'npm run build')
      # para que a pasta './cliente-pixel/.next' exista antes de iniciar o contêiner.
      - ./cliente-pixel/.next:/usr/share/nginx/html
    depends_on:
      # Garante que o Nginx só inicie após os serviços dos quais ele depende.
      - pixel
      - api-node-pixel
    restart: unless-stopped

  # Serviço 2: API Spring Boot (Java)
  pixel:
    container_name: api_spring_boot
    build:
      context: ./Pixel
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - postgres-db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/mydatabase
      - SPRING_DATASOURCE_USERNAME=myuser
      - SPRING_DATASOURCE_PASSWORD=mypassword
    restart: unless-stopped

  # Serviço 3: API Express (Node.js)
  api-node-pixel:
    container_name: api_express_node
    build:
      context: ./api-node-pixel
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      - mongo-db
    environment:
      - DB_HOST=mongo-db
      - DB_PORT=27017
      - DB_NAME=mydatabase
    restart: unless-stopped

  # Serviço 4: Banco de Dados PostgreSQL
  postgres-db:
    image: postgres:14-alpine
    container_name: postgres_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=mydatabase
      - POSTGRES_USER=myuser
      - POSTGRES_PASSWORD=mypassword
    restart: unless-stopped

  # Serviço 5: Banco de Dados MongoDB
  mongo-db:
    image: mongo:latest
    container_name: mongo_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    restart: unless-stopped

  # Serviço 6: Jenkins
  # Este serviço está corretamente configurado para ter acesso ao Docker da máquina host,
  # permitindo a execução de pipelines de CI/CD (Docker-in-Docker).
  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins_controller
    privileged: true
    user: root
    ports:
      - "8090:8080"
      - "50000:50000"
    volumes:
      - jenkins_data:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker
      # O caminho para o docker-compose pode variar dependendo do seu sistema.
      # Verifique o caminho correto com 'which docker-compose' se encontrar erros.
      - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose
    restart: unless-stopped

# Definição dos volumes para persistência de dados.
# Isso garante que os dados não sejam perdidos ao recriar os contêineres.
volumes:
  postgres_data:
  mongo_data:
  jenkins_data: